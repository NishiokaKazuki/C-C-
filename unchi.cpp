/* ------------------------------------------------------------------------- */
/*                                                                           */
/* 画像装飾システム                                                          */
/*                                                                           */
/* ------------------------------------------------------------------------- */
/*  番号    更新内容                                更新日      名前         */
/* ------------------------------------------------------------------------- */
/* 000000   新規作成                                2019/07/30  西岡  和輝   */
/* ------------------------------------------------------------------------- */

/* ------------------------------------------------------------------------- */
/* includeファイル                                                           */
/* ------------------------------------------------------------------------- */

#include "system.h"

void * BM_1BitColorConv  ( SLNG * , CL01 * , CL32 * );
void * BM_8BitColorConv  ( SLNG * , CL08 * , CL32 * );
void * BM_24BitColorConv ( SLNG * , CL24 * , CL32 * );
void * BM_32BitColorConv ( SLNG * , CL32 * , BMPF * );
SLNG   BM_ImageSetPointer( SLNG * , void * , void * , UCHR   );

int main( void ) {


    
    system( "pause" );
    return 0;

}

/* ------------------------------------------------------------------------- */
/* 関数名   : BM_BmpFormatConv                                               */
/* 機能名   : BMPbitcolorの変換                                              */
/* 機能概要 : 指定された色ビット数に変換する関数の呼出                       */
/* 引数	    : SLNG * : sl_errchk   : エラー確認                              */
/*          : SCHR * :  sc_filename: ファイル名                              */
/* 戻り値   : SLNG   :             : ファイルサイズ                          */
/* 作成日   : 2019/07/09       西岡  和輝       新規作成                     */
/* ------------------------------------------------------------------------- */

SLNG   BM_BmpFormatConv ( SLNG * sl_Errchk , BMPF * Filedata , UCHR uc_Bitcnt ) {

    /* 引数チェック -------------------------------------------------------- */
    // NULLポインタの場合
    if ( Filedata == NULL ) {
    
        * sl_Errchk = ErrerPrint ( 1 , ( SCHR * ) "aa" );
        return 0;

    }

    // データが存在しない場合
    if ( Filedata -> sl_Height == 0 || 
         Filedata -> sl_Width  == 0 ) {
    
        * sl_Errchk = ErrerPrint ( 2 , ( SCHR * ) "aa" );
        return 0;
    
    } 

    // 変換後のビット数が変わらない場合
    if ( Filedata -> uc_Bitcnt == uc_Bitcnt ) { return 0; }

    /* 変数宣言 ------------------------------------------------------------ */
    ULNG   ul_Index    = 0;                       // 画像データの現在位置
    ULNG   ul_Datasize = 0;                       // 画像データビット数
    void * Curr_pt     = NULL;                    // 1bitカラーポインタ
    void * New_pt      = NULL;
    CL32 * Curr_pt32   = ( CL32 * ) Filedata -> Imagedata; // 32bitカラーポインタ

    ul_Datasize = ( Filedata -> sl_Height ) * ( Filedata -> sl_Width ); // データサイズ取得

    Curr_pt = BM_ImageNewPointer ( sl_Errchk , uc_Bitcnt );             // 先頭ポインタ取得
    Filedata -> Imagedata = Curr_pt;    
  
    // 全データ変換終了までループ
    for ( ul_Index = 0 ; ul_Index < ul_Datasize ; ul_Index ++ ) {

        // 指定された色ビット数に応じて分岐
        switch ( uc_Bitcnt ) {
    
            case BM_01 : BM_1BitColorConv  ( sl_Errchk , ( CL01 * )Curr_pt , Curr_pt32 ); //  1bit
                         break;
            case BM_08 : BM_8BitColorConv  ( sl_Errchk , ( CL08 * )Curr_pt , Curr_pt32 ); //  8bit
                         break;
            case BM_24 : BM_24BitColorConv ( sl_Errchk , ( CL24 * )Curr_pt , Curr_pt32 ); // 24bit
                         break;
            case BM_32 : BM_32BitColorConv ( sl_Errchk , ( CL32 * )Curr_pt , Filedata  ); // 32bit
                         break;
            default    : * sl_Errchk = ErrerPrint ( 3 , ( SCHR * ) "aa" );    // 異常値
                         return 0;

        }

        // NULLポインタかチェック
        if ( Curr_pt32 -> Next_pt == NULL ) { 
        
            break;

        }
        
        Curr_pt32 = Curr_pt32 -> Next_pt;
        free ( Curr_pt32 -> Prev_pt ); 

        New_pt = BM_ImageNewPointer ( sl_Errchk , uc_Bitcnt );
        BM_ImageSetPointer ( sl_Errchk , Curr_pt , New_pt , uc_Bitcnt );

        Curr_pt = New_pt;

    }

    free( Curr_pt32 );

    return 0;

}

/* ------------------------------------------------------------------------- */
/* 関数名   : BM_ImageNewPointer                                             */
/* 機能名   : 新規リストの確保                                               */
/* 機能概要 : uc_Bitcntの値に応じて新規リストの確保                          */
/* 引数	    : SLNG * : sl_errchk   : エラー確認                              */
/*          : UCHR   : uc_Bitcnt   : 色ビット数                              */
/* 戻り値   : void * : New_pt      : 確保したリストのポインタ                */
/* 作成日   : 2019/07/30       西岡  和輝       新規作成                     */
/* ------------------------------------------------------------------------- */

void * BM_ImageNewPointer ( SLNG * sl_Errchk , UCHR uc_Bitcnt ) {
    
    /* 変数宣言 ------------------------------------------------------------ */
    void * New_pt;

    // 色ビット数で分岐
    switch ( uc_Bitcnt ) {
    
        case BM_01 : New_pt = calloc ( 1 , sizeof( CL01 ) ); //  1bit
                     break;
        case BM_08 : New_pt = calloc ( 1 , sizeof( CL08 ) ); //  8bit
                     break;
        case BM_24 : New_pt = calloc ( 1 , sizeof( CL24 ) ); // 24bit
                     break;
        case BM_32 : New_pt = calloc ( 1 , sizeof( CL32 ) ); // 32bit
                     break;
        default    : * sl_Errchk = ErrerPrint ( 1, ( SCHR * ) "aa" ); // 異常値

    }

    return New_pt;

}

/* ------------------------------------------------------------------------- */
/* 関数名   : BM_ImageSetPointer                                             */
/* 機能名   : リストの方向の設定                                             */
/* 機能概要 : 二つのリストの方向の設定                                       */
/* 引数	    : SLNG * : sl_errchk   : エラー確認                              */
/*          : void * : Curr_pt1    : 前リスト                                */
/*          : void * : Curr_pt2    : 後リスト                                */
/*          : UCHR   : uc_Bitcnt   : 色ビット数                              */
/* 戻り値   : SLNG   :             : 適当                                    */
/* 作成日   : 2019/07/30       西岡  和輝       新規作成                     */
/* ------------------------------------------------------------------------- */

SLNG   BM_ImageSetPointer ( SLNG * sl_Errchk , void * Curr_pt1 , void * Curr_pt2 , UCHR uc_Bitcnt ) {
    
    /* 引数チェック -------------------------------------------------------- */

    // NULLポインタの場合
    if ( Curr_pt1 == NULL ||
         Curr_pt2 == NULL    ) {
    
        * sl_Errchk = ErrerPrint ( 1 , ( SCHR * ) "aa" );
        return 0;

    } 

    // 色ビット数で分岐
    switch ( uc_Bitcnt ) {
    
        // 1bit
        case BM_01 : CL01 * New_pt1 = ( CL01 * )Curr_pt1;
                     CL01 * New_pt2 = ( CL01 * )Curr_pt2;

                     New_pt1 -> Next_pt = New_pt2;
                     New_pt2 -> Prev_pt = New_pt1;

                     break;

        // 8bit
        case BM_08 : CL08 * New_pt1 = ( CL08 * )Curr_pt1;
                     CL08 * New_pt2 = ( CL08 * )Curr_pt2;

                     New_pt1 -> Next_pt = New_pt2;
                     New_pt2 -> Prev_pt = New_pt1;

                     break;

        // 24bit
        case BM_24 : CL24 * New_pt1 = ( CL24 * )Curr_pt1;
                     CL24 * New_pt2 = ( CL24 * )Curr_pt2;

                     New_pt1 -> Next_pt = New_pt2;
                     New_pt2 -> Prev_pt = New_pt1;

                     break;

        // 32bit
        case BM_32 : CL32 * New_pt1 = ( CL32 * )Curr_pt1;
                     CL32 * New_pt2 = ( CL32 * )Curr_pt2;

                     New_pt1 -> Next_pt = New_pt2;
                     New_pt2 -> Prev_pt = New_pt1;

                     break;

        default    : * sl_Errchk = ErrerPrint ( 2, ( SCHR * ) "aa" ); // 異常値

    }

    return 0;

}

/* ------------------------------------------------------------------------- */
/* 関数名   : ErrerPrint                                                     */
/* 機能名   : エラー出力                                                     */
/* 引数	    : SLNG * : sl_Errnum   : エラー番号                              */
/*          : SCHR * : sc_Errstr   : エラー文字列                            */
/* 戻り値   : SLNG   :             : ファイルサイズ                          */
/* 作成日   : 2019/07/30       西岡  和輝       新規作成                     */
/* ------------------------------------------------------------------------- */

SLNG ErrerPrint ( SLNG sl_Errnum , SCHR * sc_Errstr ) {

    printf( "errernumber[%03d]\n %s\n " , sl_Errnum , sc_Errstr );
    return BM_NG;
}


/* ------------------------------------------------------------------------- */
/*              Copyright HAL Collage of Technology & Design                 */
/* ------------------------------------------------------------------------- */