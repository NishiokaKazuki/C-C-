/* ------------------------------------------------------------------------- */
/*                                                                           */
/* クイックソート                                                            */
/*                                                                           */
/* ------------------------------------------------------------------------- */
/*  番号    更新内容                                更新日      名前         */
/* ------------------------------------------------------------------------- */
/* 000000   新規作成                                2019/07/10  西岡  和輝   */
/* ------------------------------------------------------------------------- */

/* ------------------------------------------------------------------------- */
/* includeファイル                                                           */
/* ------------------------------------------------------------------------- */

#include "quicksort.h"

/* ------------------------------------------------------------------------- */
/* プロトタイプ宣言                                                          */
/* ------------------------------------------------------------------------- */

int Swap(int *, int *);

int quicksort ( int * sortarray , int arraynum ) {
    
    /* 変数宣言 ------------------------------------------------------------ */
    int si_pivot  = 0;            // 基準値
    int si_index1 = 0;            // 基準値より小さい数の配列
    int si_index2 = arraynum - 1; // 基準値より大きい数の配列

    // 基準値決定
    si_pivot = rand() % arraynum;
    si_pivot = * ( sortarray + si_pivot );

    // 基準値を境に並び替え
    while ( 1 ) {

        // 基準値以上発見までループ
        for ( ; si_index1 < si_index2 ; si_index1 ++ ) {
    
            if ( * ( sortarray + si_index1 ) >= si_pivot ) { break; }
    
        }

        // 基準値以下発見までループ
        for ( ; si_index2 > si_index1 ; si_index2 -- ) {
    
            if ( * ( sortarray + si_index2 ) <  si_pivot ) { break; }
    
        }

        if ( si_index1 == si_index2 ) { break; }

        Swap ( ( sortarray + si_index1 ) , ( sortarray + si_index2 ) );

    }

    // 基準値未満の配列でソート
    if ( si_index1 != 0            ) { quicksort( sortarray                 , si_index1             ); }
    // 基準値以上の配列でソート
    if ( si_index2 != arraynum - 1 ) { quicksort( ( sortarray + si_index2 ) , arraynum  - si_index1 ); }

    return 0;

}

// 入れ替え
int Swap ( int * si_data1 , int * si_data2 ) {

    int si_sub = 0;
    
    si_sub     = * si_data1;
    * si_data1 = * si_data2;
    * si_data2 = si_sub;
    
    return 0;

}

/* ------------------------------------------------------------------------- */
/*              Copyright HAL Collage of Technology & Design                 */
/* ------------------------------------------------------------------------- */