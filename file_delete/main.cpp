/* ------------------------------------------------------------------------- */
/* main.cpp	                                                                 */
/* ＣＬ２１	                                                                 */
/* フォルダ削除ソースファイル                                                */
/*                                                                           */
/* ------------------------------------------------------------------------- */
/*  番号    更新内容                                更新日      名前         */
/* ------------------------------------------------------------------------- */
/* 000000   新規作成                                2019/06/11	西岡　和輝   */
/* 000001   更新                                    2019/06/17	西岡　和輝   */
/* 000002   完成                                    2019/06/24	西岡　和輝   */
/* ------------------------------------------------------------------------- */

/* ------------------------------------------------------------------------- */
/* includeファイル                                                           */
/* ------------------------------------------------------------------------- */

#include "main.h"

SINT main( SINT argc , SCHR * argv[] ) {

    /* 変数宣言 ------------------------------------------------------------ */
    SLNG sl_err_chk = 0; /* エラーチェックの値                               */

    /* 主プログラム起動 ---------------------------------------------------- */
    sl_err_chk = FD_UserInterface( argc, argv[1] );
    /* エラーチェック ------------------------------------------------------ */
    if ( sl_err_chk == FD_ERR ) { printf( "エラー発生\n" ); } 
	
    /* プログラム終了 ------------------------------------------------------ */
    printf( "プログラムを終了します...\n\n" );
    system( "pause" );
    return 0;
}

/* ------------------------------------------------------------------------- */
/* 関数名   : FD_UserInterface                                               */
/* 機能名   : 分岐の入力                                                     */
/* 機能概要 : プログラム削除続行、拒否の入力                                 */
/* 引数	    : SINT   : argc : パスの個数                                     */
/* 引数	    : SCHR * : argv : パス名の文字列                                 */
/* 戻り値   : SLNG   : 正常値             : FD_OK	                         */
/*                   : 異常値             : FD_ERR                           */
/* 作成日   : 2019/06/18       西岡　和輝       新規作成                     */
/* ------------------------------------------------------------------------- */

SLNG FD_UserInterface( SINT argc , SCHR * argv ) {

    /* 変数宣言 ------------------------------------------------------------ */
    SCHR sc_casenum = 0;                /* プログラムの分岐フラグ            */
    SLNG sl_err_chk = 0;                /* エラーチェックの値                */

    /* 分岐入力判定処理 ---------------------------------------------------- */
    while ( 1 ) {

        /* パスがあるとき -------------------------------------------------- */
        if ( argc >= 2 ) {

            /* 分岐入力 ---------------------------------------------------- */
            printf( "%sを削除しますか( 0 = 続行 , 1 = 拒否 , 2 = 終了 ) ->" , argv );
            scanf ( "%c" , &sc_casenum );
            rewind( stdin );
			
        }
        
        /* パスが無いとき -------------------------------------------------- */
        if ( argc <= 1 ) {

            printf( "ファイルパスが存在しません\n" );
            return FD_OK;

        }

        /* 入力値が正しい場合 ---------------------------------------------- */
        if ( ( sc_casenum >= '0' ) && ( sc_casenum <= '2' ) ) {

            break;
            
        }

        printf( "エラー,正しい値を入力して下さい\n\n" );

    }

    /* 分岐処理 ------------------------------------------------------------ */
    switch ( sc_casenum ){

        /* 続行処理 -------------------------------------------------------- */
        case '0' : sl_err_chk = remove( ( const char * ) argv );
                   if ( sl_err_chk == FD_OK ) { break; }

                   sl_err_chk = FD_FileSearch( argv );
	               if ( sl_err_chk == FD_ERR ) { return FD_ERR; }
                   break;

        /* 拒否処理 -------------------------------------------------------- */
        case '1' : argc --;
                   argv ++;
                   sl_err_chk = FD_UserInterface( argc , argv );
                   if ( sl_err_chk == FD_ERR ) { return FD_ERR; }
                   break;

        /* 終了処理 -------------------------------------------------------- */
        default  : return FD_OK;

    }

    /* 終了入力の判定 ------------------------------------------------------ */
    while (1) {

        /* 終了入力 -------------------------------------------------------- */
        printf("プログラムを終了しますか( 0 = 終了 , 1 = 続行 ) ->");
        scanf ( "%c" , &sc_casenum );
        rewind( stdin );

        /* 終了判定 -------------------------------------------------------- */
        switch ( sc_casenum ) {
            /* 終了処理 ---------------------------------------------------- */
            case '0' : return FD_OK;

            /* 続行処理 ---------------------------------------------------- */
            case '1' : sl_err_chk = FD_UserInterface( argc , argv );
                       return FD_OK;
            /* エラー入力 -------------------------------------------------- */
            default  : printf( "エラー,正しい値を入力して下さい\n\n" );

         }

    }
    /* 正常終了 ------------------------------------------------------------ */
    return sl_err_chk;

}

/* ------------------------------------------------------------------------- */
/* 関数名   : FD_FileSearch                                                  */
/* 機能名   : フォルダの削除                                                 */
/* 機能概要 : パス名から下位に存在するファイル・フォルダの全削除             */
/* 引数	    : SCHR * : sc_directory_folder: 指定されたフルパス               */
/* 戻り値   : SLNG   : 正常値             : FD_OK	                         */
/*                   : 異常値             : FD_ERR                           */
/* 作成日   : 2019/06/18       西岡　和輝       新規作成                     */
/* ------------------------------------------------------------------------- */

SLNG FD_FileSearch( SCHR * sc_directory_folder ) {

    /* 変数宣言 ------------------------------------------------------------ */
    SLNG sl_openid    = 0;              /* Find_Openで取得するID             */
    SLNG sl_err_chk   = 0;              /* エラーチェックの値                */
    ULNG ul_file_size = 0;              /* Findで取得するファイルサイズ      */
    SCHR sc_file_name[FILE_NAME_SIZE];  /* Findで取得するファイル,フォルダ名 */
    SCHR sc_full_path[FILE_NAME_SIZE];  /* FD_StrUnitで取得するフルパス名    */
    SCHR sc_seed_chk  = 0;              /* Findで取得する識別子              */          
	
    /* 変数の初期化 -------------------------------------------------------- */
    memset( sc_file_name , 0 , sizeof( SCHR ) * FILE_NAME_SIZE );
    memset( sc_full_path , 0 , sizeof( SCHR ) * FILE_NAME_SIZE );

    /* Find_Open呼出 ------------------------------------------------------- */
    sl_openid = Find_Open ( ( char * ) sc_directory_folder , strlen ( ( const char * ) sc_directory_folder ) );

    while ( 1 ) {

        /* Findの呼出 ------------------------------------------------------ */
        sl_err_chk = Find( sl_openid , ( char * ) sc_file_name , ( unsigned short ) FILE_NAME_SIZE , ( unsigned long * ) &ul_file_size , ( char * ) &sc_seed_chk );
        /* エラーチェック -------------------------------------------------- */
        if ( sl_err_chk  == FIND_NG  ) { return FD_ErrerPrint( 1 ); } 
        if ( sl_err_chk  == FIND_EOF ) { break;         } /* 終了チェック    */

        /* ファイルを発見時 ------------------------------------------------ */
        if ( sc_seed_chk == FIND_FILE ) {

            /* FD_StrUnitを呼出 -------------------------------------------- */
            sl_err_chk = FD_StrUnit( sc_full_path , sc_directory_folder , sc_file_name );
            /* エラーチェック ---------------------------------------------- */
            if ( sl_err_chk == FD_ERR ) { return FD_ErrerPrint( 3 ); } 

           /* ファイル削除 ------------------------------------------------ */
            sl_err_chk = remove( ( const char * ) sc_full_path  );
            /* エラーチェック ---------------------------------------------- */
            if ( sl_err_chk != FD_OK ) { return FD_ErrerPrint( 2 ); } 

        }

        /* フォルダを発見時 ------------------------------------------------ */
        if ( sc_seed_chk == FIND_FLD ) {

            /* FD_StrUnitを呼出 -------------------------------------------- */
            sl_err_chk = FD_StrUnit   ( sc_full_path , sc_directory_folder , sc_file_name );
            /* エラーチェック ---------------------------------------------- */
            if ( sl_err_chk == FD_ERR ) { return FD_ErrerPrint( 3 ); } 
		
            /* ファイル削除 ------------------------------------------------ */
            sl_err_chk = FD_FileSearch( sc_full_path );
            /* エラーチェック ---------------------------------------------- */
            if ( sl_err_chk == FD_ERR ) { return FD_ERR; } 

        }

    }

    /* フォルダを閉じる ---------------------------------------------------- */
    sl_err_chk = Find_Close( sl_openid );
    /* エラーチェック ------------------------------------------------------ */
    if ( sl_err_chk == FIND_NG ) { return FD_ErrerPrint( 4 ); } 

    /* フォルダを削除 ------------------------------------------------------ */
    sl_err_chk = _rmdir( ( const char * ) sc_directory_folder );
    /* エラーチェック ------------------------------------------------------ */
    if ( sl_err_chk == FD_ERR  ) { return FD_ErrerPrint( 5 ); }

    /* 正常終了       ------------------------------------------------------ */
    return FIND_OK;

}

/* ------------------------------------------------------------------------- */
/* 関数名   : FD_StrUnit                                                     */
/* 機能名   : フルパスを作成                                                 */
/* 機能概要 : 引数のパス名を結合しフルパスへ変換                             */
/* 引数	    : SCHR * : sc_full_path    : 作成したフルパスを返還              */
/*          : SCHR * : sc_forward_path : 前に結合するパス名                  */
/*          : SCHR * : sc_behind_path  : 後に結合するパス名                  */
/* 戻り値   : SLNG   : 正常値          : FD_OK	                             */
/*                   : 異常値          : FD_ERR                              */
/* 作成日   : 2019/06/24       西岡　和輝       新規作成                     */
/* ------------------------------------------------------------------------- */

SLNG FD_StrUnit( SCHR * sc_full_path , SCHR * sc_forward_path , SCHR * sc_behind_path ) {

    /* ファイルパス格納レジスタを初期化 ------------------------------------ */
    memset( sc_full_path , 0 , sizeof ( SCHR ) * FILE_NAME_SIZE );

    /* 結合するパスのレジスタが空かチェック -------------------------------- */
    if ( ( strlen ( ( char * ) sc_forward_path ) == 0 ) ||
       (  strlen ( ( char * ) sc_behind_path   ) == 0 ) ) {

        return FD_ERR;

    }
	
	/* パスを結合 */
    strcat( ( char * ) sc_full_path , ( char * ) sc_forward_path );
    strcat( ( char * ) sc_full_path , "\\" );
    strcat( ( char * ) sc_full_path , ( char * ) sc_behind_path );

    /* 正常終了 ------------------------------------------------------------ */
    return FD_OK;

}

/* ------------------------------------------------------------------------- */
/* 関数名   : FD_ErrerPrint                                                  */
/* 機能名   : エラー内容を表示                                               */
/* 機能概要 : READMEに記載されたエラー番号を出力                             */
/* 引数	    : SLNG   : sl_errer        : エラー番号                          */
/* 戻り値   : SLNG   : 異常値          : FD_ERR	                             */
/* 作成日   : 2019/06/24       西岡　和輝       新規作成                     */
/* ------------------------------------------------------------------------- */

SLNG FD_ErrerPrint( SLNG sl_errer ) {

    printf( "ERROR[%02d]", sl_errer );

    return FD_ERR;

} 
/* ------------------------------------------------------------------------- */
/*              Copyright HAL Collage of Technology & Design                 */
/* ------------------------------------------------------------------------- */